
// Mode=   Wert als Text mit Einheit (und Zustandsfarbe BETA !!)
// Mode=1  Bild zurück
// Mode=2  Progressbar zurück
// Mode=3  Slider zurück
// Mode=4  ProcessData
// Mode=5  Show/Hide Line
// Mode=6  Kommentar zurück / ohne Formatierung
// Mode=7  Einheit zurück / ohne Formatierung
// Mode=8  Wert als Text / ohne Formatierung
// Mode=9  Siri antwortet
// Mode=10 MessageVar wird zurückgegeben
// Mode=11 Anzahl der Störungen für Menü


Proc Main

 // Strings
  Global Dim sData:str             := ReqVar.sData
  Global Dim sResultCon:str
  Global Dim sResultJS:str
  Global Dim sResultClass:str
  Global Dim sResultStyle:str
  Global Dim sHandle:str
  Global Dim sMode:str
  Global Dim sBild:str
  Global Dim sCol00:str
  Global Dim sCol01:str
  Global Dim sCol02:str
  Global Dim sAnimate:str
  Global Dim sActPrio:str
  Global Dim sConnect:str
  Global Dim sTempRes:str
  Global Dim sChecked:str
  Global Dim sClick01:str
  Global Dim sClick02:str
  Global Dim sClick03:str
  Global Dim sThisName:str
  Global Dim sActValue:str
  Global Dim sDateTime:str
  Global Dim sShowLine:str


  // Arrays
  Global Dim aPrioColorList:arr    := StrToArray(GetMessageVar('PrioColorList'))
  Global Dim aData:arr
  Global Dim Page:arr
  Global Dim aKonfig:arr
//  Global Dim aGroupList:arr

  // Integer
  Global Dim iCountResults:int
  Global Dim ihandle:int
  Global Dim iFlag:int
  Global Dim iStoerPrio:int
  Global Dim iCountFaults:int
  
  // Boolean
  Global Dim bDGLT:boolean
  Global Dim bActStatus:boolean


  // sData wird aufbereitet
  StrReplaceEx sData, '["', ''
  StrReplaceEx sData, '"]', ''
  StrReplaceEx sData, '","', '`'

  aData := StrToArrayEx(sData)

  Append Page, '{'





  for iCountResults = 1 to count(aData)

    sResultCon    := ''
    sResultJS     := ''
    sResultClass  := ''
    sResultStyle  := ''
    sHandle       := aData[iCountResults, 1]
    
    sMode         := aData[iCountResults, 2]
    sBild         := aData[iCountResults, 3]

    sCol00        := aData[iCountResults, 4]
    sCol01        := aData[iCountResults, 5]
    sCol02        := aData[iCountResults, 6]

    sAnimate      := aData[iCountResults, 7]







    if (ishandle(ival(shandle)) and len(sHandle) > 0)  then

      ihandle     := ival(shandle)
      sActPrio    := GetSwitchPrioText(iHandle)
      aKonfig     := GetKonfig(iHandle)
      iFlag       := iVal(aKonfig.Flags)
      bDGLT       := isBit2(iFlag)
      iStoerPrio  := GetActPrio(iHandle)
      GetProcessData(sConnect, iHandle, 'Enabled')

    Endif







    Select sMode

    Case '1'

      if (sConnect = 'FALSE') Then
        sResultClass := ' w3-opacity-max'
      EndIf


      Dim TmpColor:string   := ''
      
      TmpColor := aPrioColorList[GetActPrio(iHandle) + 1]

      // GLT (nicht dauer GLT)
      if (sActPrio = 'GLT') and (bDGLT = False) Then
        sResultClass := sResultClass + ' modeGLT'
        sResultStyle := '--akt-color: ' + TmpColor + ' ;'
      else
        sResultStyle := 'color: ' + TmpColor + ' ;'
      EndIf



      if (sBild = 'liveicon') then
        sResultCon := '<img src="//www.wunderground.com/static/i/c/v4/' + GetRealActValueAsString(iHandle) + '.svg" style="width:18px;">'
      else
        sResultClass := sResultClass +  ' la ' + sBild
      endif


      if (isHandle(iHandle)) Then

        // Schaltbefehl
        if (isDigWord(iHandle)) Then

          if (sAnimate = '1') and (GetActPosition(iHandle) > 0) Then
            sResultClass := sResultClass +  ' w3-spin'
          EndIf
  
          if (len(sCol00) = 1) and (sCol00 <> sval(GetActPosition(iHandle))) then
            sResultClass := sResultClass + ' w3-hide'
          endif

        EndIf


        // Bit
        if (isDigBit(iHandle)) Then

          if (sAnimate = '1') and (GetActBit(iHandle) = True) Then
            sResultClass := sResultClass +  ' w3-spin'
          EndIf

        EndIf

      EndIf

      sResultClass := 'w3-large' + sResultClass










    Case '2'


      sActValue         := sVal((GetRealActValue(iHandle) + GetMinValue(iHandle)) * (100 / (GetMaxValue(iHandle) - GetMinValue(iHandle))))

      // DP online/offline
      if (sConnect = 'FALSE') Then
        sResultJS := '$("#' + sBild + '").parent().addClass("w3-opacity-max");'
      else
        sResultJS := '$("#' + sBild + '").parent().removeClass("w3-opacity-max");'
      EndIf

      // gestört
      if (iStoerPrio > 63) Then

        sResultJS :=  sResultJS + '$("#' + sBild + '").parent().removeClass("w3-border-dark-grey w3-border-purple");'
        sResultJS :=  sResultJS + '$("#' + sBild + '").parent().addClass("w3-border-red");'

      // GLT (nicht dauer GLT)
      elseif (sActPrio = 'GLT') and (bDGLT = False)  Then

        sResultJS :=  sResultJS + '$("#' + sBild + '").parent().removeClass("w3-border-dark-grey w3-border-red");'
        sResultJS :=  sResultJS + '$("#' + sBild + '").parent().addClass("w3-border-purple");'

      else

          sResultJS :=  sResultJS + '$("#' + sBild + '").parent().removeClass("w3-border-red w3-border-purple");'
          sResultJS :=  sResultJS + '$("#' + sBild + '").parent().addClass("w3-border-dark-grey");'          

      endif


      sResultJS := sResultJS + '$("#' + sBild + '").animate({width: "' + sActValue + '%"}, 1000);'







    Case '3'

      // wenn Meldegruppe vorhanden - dann Mode 4 (alte Konfig abfangen)
      if (scol01 = 'null') then scol01 = ''
      if (len(scol01) > 1) then scol02 = '4'

      // wenn Online oder Meldegruppe
      if (sConnect = 'TRUE') or (len(scol01) > 1) Then
      else
        sResultClass := ' w3-opacity-max'
      EndIf




      // Mode 1 + 2
      if (scol02 = '1') or (scol02 = '2') then
    
        bActStatus := false

        if (isDigWord(iHandle)) then
          if (GetActPosition(ihandle) = 1) then bActStatus = true
        endif

        if (isDigBit(iHandle)) then
          if (GetActBit(ihandle)) then  bActStatus = true
        endif


        if (bActStatus) then

          sChecked := 'checked'
          sThisName := 'click off'

        else

          sChecked := ''
          sThisName := 'click on'

        endIf

        sClick01 := sBild
        sClick02 := sCol02
        sClick03 := sVal(iHandle)


      endif





      // Mode 3
      if (scol02 = '3')  then
        if (isBit12(GetBmpFlags(ihandle))) Then

          sChecked := 'checked'
          sThisName := 'click 0'

        else

          sChecked := ''
          sThisName := 'click 1'

        endIf

        sClick01 := 'villa'
        sClick02 := '6'
        sClick03 := sHandle

      endif




      // Mode 4
      if (scol02 = '4')  then

        Dim aGroupList:arr          := GetGroupList (NameToHandle(scol01))
        Dim bIsInGroup:boolean      := false
        Dim iSchleifeCheckGroup:int

        for iSchleifeCheckGroup = 1 to count(aGroupList)
          if sval(ihandle) = aGroupList[iSchleifeCheckGroup] then bIsInGroup = true
        next

        if (bIsInGroup) Then

          sChecked := ' checked'
          sThisName := 'click 0'

        else

          sChecked := ' '
          sThisName := 'click 1'

        endIf

        sClick01 := sval(NameToHandle(scol01))
        sClick02 := '8'
        sClick03 := sHandle

      endif

      sResultCon := '<label class="switch"><input type="checkbox"' + sChecked + ' onclick="SendPost(this, `' + sClick01 + '`, `' + sClick02 + '`, `' + sClick03 + '`); this.name = `' + sThisName + '`"><span class="slider round"></span></label>'

   











    Case '4'

      GetProcessData sDateTime, iHandle , sBild

      // Zeit Umwandeln in String
      if (sCol00 = '1') Then
        sResultCon := DateTimeToStr(rVal(rVal(sDateTime)))
      else
        sResultCon := sDateTime
      EndIf



    Case '5'

      sShowLine := 'fadeOut'

      // analoger Handle
      if (isAna(iHandle)) Then
   
        if (GetRealActValue(iHandle) > 0.0) Then
          sShowLine := 'show'
        Endif 
 
      else
   
        if (GetActBit(iHandle)) Then
          sShowLine := 'show'
        Endif 
 
      EndIf

      sResultJS := '$("#' + sBild + '").' + sShowLine + '();'




    Case '6'

      sResultCon := GetComment(iHandle)
          

    Case '7'

      sResultCon := GetAnaUnit(iHandle)
          

    
    
    Case '8'
    
      // analoger Handle
      if (isAna(iHandle) = True) Then
        sResultCon :=  sVal(GetRealActValueAsString(iHandle))
      // digitaler Handle
      else
        sResultCon := PrioToString(GetActPrio(iHandle))
      EndIf
    

      
    Case '9'
      sResultCon := 'n9a'    

    Case '10'
     
      sResultCon := GetMessageVar(sCol00)

    Case '11'

      iCountFaults := ival(GetMessageVar('sCountFaults'))
      SetMessageVar 'sLastRequest', sval(now)

      // Störungen vorhanden
      if (iCountFaults > 0) then

        sResultCon := sval(iCountFaults)
        sResultClass := sResultClass + ' w3-border-orange w3-border-bottom'

        // keine Störungen
      else

        sResultClass := sResultClass + ' w3-hide'

      Endif
		  



    // Wert als Text zurück
    else



      if (sConnect = 'FALSE') Then
        sResultClass := ' w3-opacity-max'
      EndIf
		
      // GLT (nicht dauer GLT)
      if (sActPrio = 'GLT') and (bDGLT = False) Then
        sResultClass := sResultClass + ' w3-border-bottom w3-border-purple'
        sResultClass := sResultClass + ' modeGLT'
      endIf









      Dim TmpColor:string := ''

      TmpColor := aPrioColorList[GetActPrio(iHandle) + 1]
			sResultStyle := 'color:' + TmpColor + ';'

      // analoger Handle
      if (isAna(iHandle) = True) Then
        sResultCon := sVal(GetRealActValueAsString(iHandle)) + ' ' + GetAnaUnit(iHandle)
      // digitaler Handle
      else
        sResultCon :=  PrioToString(GetActPrio(iHandle))
      EndIf



  EndSelect











    
    if (len(sResultClass) > 1) or (len(sResultStyle) > 1) then

      sTempRes := '<div'

      // class vorhanden
      if (len(sResultClass) > 1) then
        sTempRes := sTempRes + ' class="' + sResultClass + '"'
      endif

      // style vorhanden
      if (len(sResultStyle) > 1) then
        sTempRes := sTempRes + ' style="' + sResultStyle + '"'
      endif

      sResultCon := sTempRes + '>' + sResultCon + '</div>'

    endif
    











    // JSON will keine Anführungszeichen im String haben
    StrReplaceEx sResultCon, '"', '\"'

//    if (iCountResults = count(aData)) then
//      Append Page, '  "ct' + sval(iCountResults) + '": "' + sResultCon + '"'
//    else
      Append Page, '  "ct' + sval(iCountResults) + '": "' + sResultCon + '",'
//    endif

    // JS ist vorhanden
    if (len(sResultJS) > 1) then
      StrReplaceEx sResultJS, '"', '\"'
      Append Page, '  "js' + sval(iCountResults) + '": "' + sResultJS + '",'
    endif

    if (iCountResults = count(aData)) then
      Append Page, '  "ph": "0"'
    endif

   



  next

  Append Page, '}'

EndProc




;EOF
