Proc Main

 //   function SendPost(elmnt, page, aktion, handle)

// Übersicht der Aktionen:
// 1 = Toggle Schaltbefehl/BIT DP  0-1  oder 1-0
// 2 = Impuls Schaltbefehl  0-1-0
// 3 = Stufe stellen (Stufe in sPage)
// 4 = SetExtVar (page=ExtVarName;ExtVarValue)
// 5 = Aktwert stellen (DP ohne Scanner)
// 6 = Toggle GLT<->AS
// 7 = Sollwert analog DP stellen
// 8 = DP in Gruppe aufnehmen oder entfernen
// 9 = SetMessageVar  (page=API0815;Hallo Welt)

// 10 = AJAX Task

// 11 = SetKonfigData (page=Feldname;NeuerWert)



  Dim iStatus:          Int         := 0
  Dim sResult:          String    	:= ''
  Dim sResultTemp:		  String      := ''
  Dim y:				        Int			    := 0	
  Dim iStrPos:			    Int			    := 0 
  Dim sResultPic:		    String      := ''
  Dim sResultColor:     String      := 'green'
  Dim sResultText:      String      := ''


  if (ishandle(ihandle)) then
    sResultText := GetComment(ihandle)
  endif


  Select sAktion

    Case '1'
      
      // Schaltbefehl
      if (isDigWord(iHandle) = True) and ((GetActPosition(iHandle) = 0) or (GetActPosition(iHandle) = 1)) Then

			  // 0 - 1
        if GetActPosition(iHandle) = 0 Then
          sResult := 'Datenpunkt "' + GetComment(iHandle) + '" konnte nicht von 0 auf 1 gestellt werden'
          SetDebPosition iHandle, 1
          SetScanWriteInfo iHandle

          for x2 = 1 to 300

            Sleep 10

            if GetActPosition(iHandle) = 1 Then
              sResult := 'check0815'
              sResult := sResult + PrioToString(GetActPrio(iHandle))
              sResultPic := 'la la-check'
              Break
            EndIf
					
          Next

        // 1 - 0
        else

          sResult := 'Datenpunkt "' + GetComment(iHandle) + '" konnte nicht von 1 auf 0 gestellt werden'
          SetDebPosition iHandle, 0
          SetScanWriteInfo iHandle

          for x2 = 1 to 300
          
            Sleep 10

            if GetActPosition(iHandle) = 0 Then
              sResult := 'check0815'
              sResult := sResult + PrioToString(GetActPrio(iHandle))
              sResultPic := 'las la-check'
              break
            EndIf

          Next

        EndIf

      EndIf

      // BIT Datenpunkt
      if (isDigBit(iHandle)) then

        // EIN dann AUS
        if (GetActBit(iHandle)) then

          sResult := 'Datenpunkt "' + GetComment(iHandle) + '" konnte nicht von 0 auf 1 gestellt werden'
          SetActBit iHandle, false

          if not (GetActBit(iHandle)) Then
            sResult := 'check0815'
            sResult := sResult + PrioToString(GetActPrio(iHandle))
            sResultPic := 'la la-check'
          EndIf

        // AUS dann EIN
        else

          sResult := 'Datenpunkt "' + GetComment(iHandle) + '" konnte nicht von 1 auf 0 gestellt werden'
          SetActBit iHandle, true

          if (GetActBit(iHandle)) Then
            sResult := 'check0815'
            sResult := sResult + PrioToString(GetActPrio(iHandle))
            sResultPic := 'la la-check'
          EndIf

        Endif

      Endif










    Case '2'

      // 0 - 1 - 0
      sResult := 'Datenpunkt "' + GetComment(iHandle) + '" konnte nicht auf 0-1-0 gestellt werden'

      if GetActPosition(iHandle) = 0 Then

        SetDebPosition iHandle, 1
        SetScanWriteInfo iHandle

        for x2 = 1 to 300
        
          Sleep 10

          if GetActPosition(iHandle) = 1 Then

            Sleep(2500)
            SetDebPosition iHandle, 0
            SetScanWriteInfo iHandle

            for y = 1 to 300
            
              Sleep 10
             
              if GetActPosition(iHandle) = 0 Then
                sResult := 'check0815'
                sResult := sResult + 'ok'
                sResultPic := 'la la-check'
                break
              EndIf
             
            Next

            break

          EndIf

        Next

      EndIf




    Case '3'

      Dim iStufe:		Int := ival(sPage)

      sResult := 'Datenpunkt "' + GetComment(iHandle) + '" konnte nicht auf ' + sval(iStufe) + ' gestellt werden'
	  
      if (isDigWord(iHandle) = True) Then
      
        if (GetActPosition(iHandle) <> iStufe) Then 
          sResultTemp := 'noAS'
        EndIf

        SetDebPosition iHandle, iStufe
        SetScanWriteInfo iHandle

        for x2 = 1 to 300
           
          Sleep 10

          if GetActPosition(iHandle) = iStufe Then
            
            sResult := 'check0815'
		
            if sResultTemp = 'noAS' then
              sResultPic := 'las la-check'
              sResult := sResult + PrioToString(GetActPrio(iHandle))
            else
              sResultPic := 'las la-check'
              sResult := sResult + 'GLT'
              sResultColor := 'purple'
            endif

          break

          EndIf
		  
        Next
		
      else

        sResult := 'Datenpunkt "' + GetComment(iHandle) + '" ist kein Schaltbefehl'

      EndIf






    // SetExtVar
    Case '4'

      sResult := 'Fehler beim setzen der SetExtVar: ' + sPage

      Dim sTxtToWrite:		str := ''
      Dim sVarToWrite:    str := ''
      Dim iCountCut:      int := 0

      StrPos iCountCut, ';', sPage
      StrCopy sVarToWrite, sPage, 1, iCountCut-1
      StrCopy sTxtToWrite, sPage, iCountCut+1, 999

      SetExtVar iHandle, sVarToWrite, sTxtToWrite     

      sResult := 'check0815'
      sResultPic := 'las la-check'
      sResult := sResult + '<span>' + sVarToWrite + ' -> ' + sTxtToWrite + '</span>'		

      sResultText := 'ok'












    // AKTWERT Wert stellen (alle DPs)
    Case '5'
  
      sResult := 'Datenpunkt "' + GetComment(iHandle) + '" Aktwertänderung auf ' + sPage + ' nicht möglich! '
  
      // analog
      if (isana(iHandle)) then

        SetRealActValue iHandle, rVal(sPage)
        Sleep 30

        if (rVal(sPage) = rVal(GetRealActValueAsString(iHandle))) Then
          sResult := 'check0815'
          sResultPic := 'las la-check'
          sResult := sResult + '<span>' + sVal(GetRealActValueAsString(iHandle)) + ' ' + GetAnaUnit(iHandle) + '</span>'		
        EndIf
	  
      endif
      


      // BIT Datenpunkt
      if (isDigBit(iHandle) = True) Then

        SetActBit iHandle, bval(sPage)
        Sleep 30

        if GetActBit(iHandle) = bval(sPage) then
          sResult := 'check0815'
          sResultPic := 'las la-check'
          sResult := sResult + '<span>'  + sval(GetActBit(iHandle)) + '</span>'		
        endIf

      endIf




      // Schaltbefehl
	  
      if (isDigWord(iHandle)) Then

        SetActPosition iHandle, ival(sPage)
        Sleep 30

        if (GetActPosition(iHandle) = ival(sPage)) then
          sResult := 'check0815'
          sResultPic := 'las la-check'
          sResult := sResult + '<span>' + ' ' + sval(GetActPosition(iHandle)) + '</span>'		
        endIf

      endIf










    Case '6'

      sResult := 'Datenpunkt "' + GetComment(iHandle) + '" konnte nicht umgeschalten werden!'

      // analoger Datenpunkt
      if isAna(ihandle) Then

        iStatus := GetStatus(iHandle)
	  
        // GLT -> AS
        if (isBit2(iStatus)) Then
			
          BitSet iStatus, 2, False
          SetStatus iHandle, iStatus
          SetScanWriteInfo iHandle
          Sleep(350)
			  
          if (isBit2(GetStatus(iHandle)) = False) Then
            sResult := 'check0815'
            sResultPic := 'las la-check'
            sResult := sResult + 'AS'
			      sResultColor := 'blue'				  
          EndIf

        // AS -> GLT
        else

          BitSet iStatus, 2, True
          SetStatus iHandle, iStatus
          SetScanWriteInfo iHandle
          Sleep(350)
			   
          if (isBit2(GetStatus(iHandle)) = True) Then
            sResult := 'check0815'
            sResultPic := 'las la-check'
            sResult := sResult + 'GLT'
			      sResultColor := 'purple'
          EndIf

        EndIf
    
	    EndIf
     
      // Schaltbefehl
      if isDigWord(ihandle) Then

        iStatus := GetActValue(iHandle)

        // GLT -> AS
        if (isBit1(iStatus)) Then

          iStatus := GetDEBValue(iHandle)
          BitSet iStatus, 1, False
          SetDebValue iHandle, iStatus
          SetScanWriteInfo iHandle

          for x2 = 1 to 300
          
            Sleep 10
          
            if (isBit1(GetActValue(iHandle)) = False) Then
              sResult := 'check0815'
              sResultPic := 'las la-check'
              sResult := sResult + 'AS'
              sResultColor := 'blue'
              break
            EndIf
					 
          Next

        // AS -> GLT
        else
	  
          iStatus := GetDEBValue(iHandle)
          BitSet iStatus, 1, True
          SetDebValue iHandle, iStatus
          SetScanWriteInfo iHandle

          for x2 = 1 to 300

            Sleep 10
				   
            if (isBit1(GetActValue(iHandle)) = True) Then
              sResult := 'check0815'
              sResultPic := 'las la-check'
              sResult := sResult + 'GLT'	
              sResultColor := 'purple'					  
              break
            EndIf

          Next

        EndIf

      EndIf

    
    
    
    Case '7'
  
      sResult := 'Datenpunkt "' + GetComment(iHandle) + '" Sollwertänderung nicht möglich! ' + sPage

      SetRealDebValue iHandle, rVal(sPage)
      SetScanWriteInfo iHandle
     
      for x2 = 1 to 300
      
        Sleep 10

        if (rVal(sPage) = rVal(GetRealActValueAsString(iHandle))) Then
          sResult := 'check0815'
          sResultPic := 'las la-check'
          sResult := sResult + '<span>' + sVal(GetRealActValueAsString(iHandle)) + ' ' + GetAnaUnit(iHandle) + '</span>'		
          break
        EndIf
	  
      Next



    Case '8'
  
      Dim aGroupListAll:    array := []
      sResult := 'Datenpunkt "' + GetComment(iHandle) + '" Fehler Gruppenzuordnung ' + sPage
      aGroupListAll := GetGroupList(ival(sPage)) 
   
      for iSchleife=1 to count(aGroupListAll)
   
        if aGroupListAll[iSchleife, 1] = sval(iHandle) then
        
          RemoveDPFromGroup  bOk, iHandle, ival(sPage)
          sResult := 'check0815'
          sResultPic := 'las la-calendar-minus'

          // Spezielle Konfiguration (Konfig Page 04)
          if (NameToHandle('VILLA-ARCHIV-CURVE') = ival(sPage)) then
            sResult := sResult + '<span>echtes Event Archiv</span>'
          else
            sResult := sResult + '<span>aus Gruppe <span class="w3-text-khaki">' + GetName(ival(sPage)) + '</span> entfernt</span>'		
          endif

          sResultColor := 'brown'
          break
			   
        endif
 
      Next

      if not bOk then
      
        AddDPToGroup  bOk, iHandle, ival(sPage)	  

        if bOk then
          sResult := 'check0815'
          sResultPic := 'las la-calendar-plus'
            
          // Spezielle Konfiguration (Konfig Page 04)
          if (NameToHandle('VILLA-ARCHIV-CURVE') = ival(sPage)) then
            sResult := sResult + '<span>geglättetes Archiv</span>'
          else
            sResult := sResult + '<span>in Gruppe <span class="w3-text-khaki">' + GetName(ival(sPage)) + '</span> aufgenommen</span>'
          endif

          sResultColor := 'brown'				
          
        Endif

      Endif


    // SetMessageVar
    Case '9'

      sResult := 'Fehler beim setzen der MessageVar: ' + sPage

      Dim sTxtToWrite:		str := ''
      Dim sVarToWrite:    str := ''
      Dim iCountCut:      int := 0

      StrPos iCountCut, ';', sPage
      StrCopy sVarToWrite, sPage, 1, iCountCut-1
      StrCopy sTxtToWrite, sPage, iCountCut+1, 999

      SetMessageVar sVarToWrite, sTxtToWrite

      sResult := 'check0815'
      sResultPic := 'las la-check'
      sResult := sResult + '<span>' + sVarToWrite + ' -> ' + sTxtToWrite + '</span>'		

      sResultText := 'ok'





    // SetKonfigData
    Case '11'

      Dim sDPFeld:    		str := ''
      Dim sDPValue:       str := ''
      Dim iCountCut:      int := 0
      Dim sFaktor:        str := ''
      Dim sOrgVal:        str := ''

      StrPos iCountCut, ';', sPage
      StrCopy sDPFeld, sPage, 1, iCountCut-1
      StrCopy sDPValue, sPage, iCountCut+1, 999

      sOrgVal := sDPValue

      sResult := 'Fehler beim setzen des Feldes ' + sDPFeld + ': ' + sDPValue

      StrPos iStrPos, 'Grenze', sDPFeld
 
      // Anpassung des Grenzwertes
      if (iStrPos > 0) then
        getKonfigdata sFaktor, ihandle, 'Faktor'
        sDPValue := sval(ival(rval(sDPValue) div rval(sFaktor)))
      endif

      if (isDigBit(ihandle)) and (sDPFeld = 'MeldePrio1') then
        if (ival(sDPValue) > 63) then
         SetKonfigData ihandle, 'MeldePrio1', '-1'
         sDPFeld := 'StoerPrio'
        else
         SetKonfigData ihandle, 'StoerPrio', '-1'
         sDPFeld := 'MeldePrio1'    
        endif
      endif

      SetKonfigData ihandle, sDPFeld, sDPValue   

      sResult := 'check0815'
      sResultPic := 'las la-check'
      sResult := sResult + '<span>' + sDPFeld + ' -> ' + sOrgVal + '</span>'		

      sResultText := 'ok'





	  else

      sResult := 'Fehler: keine entsprechende Aktion gefunden'

  EndSelect


  // Überprüfen ob Vorgang erfolgreich war
  StrPos iStrPos, '0815', sResult
  
  if iStrPos > 0 then
    Append Page,  sResultPic + ';' + sResultColor + ';' + sResultText + '<br>' + sResult + ';'
  else
    Append Page,  sResultText
    Append Page,  sResult
	EndIf


EndProc
